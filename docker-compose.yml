services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - avatars:/usr/src/app/uploads
    restart: always
    env_file:
      - ./.env
      - ./backend/.env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?schema=public"
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - transcendence

  database:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./data/pg:/data/postgres
    networks:
      - transcendence
    env_file:
      - ./.env
    environment:
      PGDATA: /data/postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "9090:3000"
    restart: always
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: production
    networks:
      - transcendence

volumes:
  transcendence-postgres:
  avatars:
networks:
  transcendence:
    driver: bridge
