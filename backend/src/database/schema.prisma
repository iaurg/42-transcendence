generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

model User {
  id           String         @id @default(uuid())
  login        String         @unique
  displayName  String
  email        String
  avatar       String?
  status       UserStatus     @default(ONLINE)
  victory      Int            @default(0)
  friends      Friend[]       @relation("Friendship")
  refreshToken String?
  mfaEnabled   Boolean        @default(false)
  mfaSecret    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  chats        ChatMember[]
  messages     Message[]
  winner       MatchHistory[] @relation(name: "winner")
  loser        MatchHistory[] @relation(name: "loser")
}

model MatchHistory {
  id Int @id @default(autoincrement())

  winner       User   @relation(fields: [winnerId], references: [id], name: "winner")
  winnerId     String 
  winnerPoints Int

  loser       User   @relation(fields: [loserId], references: [id], name: "loser")
  loserId     String 
  loserPoints Int

  createdAt DateTime @default(now())
}

model Friend {
  id     String           @id @default(uuid())
  status FriendshipStatus
  users  User[]           @relation("Friendship")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Message {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userLogin], references: [login])
  userLogin String?
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  content   String
}

enum chatType {
  PUBLIC
  PRIVATE
  PROTECTED
}

model Chat {
  id        Int          @id @default(autoincrement())
  name      String       @default("New chat")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  messages  Message[]
  users     ChatMember[]
  owner     String
  chatType  chatType     @default(PUBLIC)
  password  String?
}

enum chatMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum chatMemberStatus {
  ACTIVE
  MUTED
  BANNED
}

model ChatMember {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  chat      Chat             @relation(fields: [chatId], references: [id])
  chatId    Int
  user      User             @relation(fields: [userLogin], references: [login])
  userLogin String
  role      chatMemberRole   @default(MEMBER)
  status    chatMemberStatus @default(ACTIVE)

  @@unique([chatId, userLogin], name: "chatId_userLogin")
}
